from google.colab import drive 
drive.mount('/content/gdrive')
import pandas as pd
import numpy as np
import keras
import tensorflow as tf
from keras.preprocessing.sequence import TimeseriesGenerator
import plotly.graph_objects as go
df=pd.read_csv('gdrive/My Drive/j17.csv')
Elevation_data = df['Elevation'].values
Elevation_data = Elevation_data.reshape((-1,1))

split_percent = 0.80
split = int(split_percent*len(Elevation_data))

Elevation_train = Elevation_data[:split]
Elevation_test = Elevation_data[split:]

date_train = df['Date'][:split]
date_test = df['Date'][split:]

print(len(Elevation_train))
print(len(Elevation_test))

look_back = 15

train_generator = TimeseriesGenerator(Elevation_train, Elevation_train, length=look_back, batch_size=20)     
test_generator = TimeseriesGenerator(Elevation_test, Elevation_test, length=look_back, batch_size=1)
look_back = 15
from keras.models import Sequential
from keras.layers import LSTM, Dense

model = Sequential()
model.add(
    LSTM(10,
        activation='relu',
        input_shape=(look_back,1))
)
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

num_epochs = 25
model.fit_generator(train_generator, epochs=num_epochs, verbose=1)
prediction = model.predict_generator(test_generator)

Elevation_train = Elevation_train.reshape((-1))
Elevation_test = Elevation_test.reshape((-1))
prediction = prediction.reshape((-1))

trace1 = go.Scatter(
    x = date_train,
    y = Elevation_train,
    mode = 'lines',
    name = 'Data'
)
trace2 = go.Scatter(
    x = date_test,
    y = prediction,
    mode = 'lines',
    name = 'Prediction'
)
trace3 = go.Scatter(
    x = date_test,
    y = Elevation_test,
    mode='lines',
    name = 'Ground Truth'
)
layout = go.Layout(
    title = "Google Stock",
    xaxis = {'title' : "Date"},
    yaxis = {'title' : "Elevation"}
)
fig = go.Figure(data=[trace1, trace2, trace3], layout=layout)
fig.show()